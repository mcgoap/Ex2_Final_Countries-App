{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  selected: []\n};\nexport const selectedSlice = createSlice({\n  name: \"selected\",\n  initialState,\n  reducers: {\n    //add a new country to the list using push to the selected list\n    addSelected: (state, action) => {\n      const newSelected = action.payload; //check if selected country is already in the list of selected countries, if it isn't then push the payload to the selected list\n\n      const alreadySelected = state.selected.find(selected => selected.countryCode === newSelected.countryCode);\n\n      if (!alreadySelected) {\n        state.selected.push(action.payload);\n      }\n    },\n    //delete a selected country from the list comparing via country code\n    deleteSelected: (state, action) => {\n      const deleteCountry = action.payload;\n      state.selected = state.selected.filter(selected => selected.countryCode !== deleteCountry);\n    }\n  }\n});\nexport const {\n  addSelected,\n  deleteSelected\n} = selectedSlice.actions;\nexport default selectedSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","selected","selectedSlice","name","reducers","addSelected","state","action","newSelected","payload","alreadySelected","find","countryCode","push","deleteSelected","deleteCountry","filter","actions","reducer"],"sources":["/Users/carolina/REACT/my-app/src/store/selectedSlice.tsx"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { SelectedState } from \"../types\";\n\nconst initialState: SelectedState = {\n  selected: [],\n};\n\nexport const selectedSlice = createSlice({\n  name: \"selected\",\n  initialState,\n  reducers: {\n    //add a new country to the list using push to the selected list\n    addSelected: (state, action) => {\n      const newSelected = action.payload;\n      //check if selected country is already in the list of selected countries, if it isn't then push the payload to the selected list\n      const alreadySelected = state.selected.find(\n        (selected) => selected.countryCode === newSelected.countryCode\n      );\n      if (!alreadySelected) {\n        state.selected.push(action.payload);\n      }\n    },\n    //delete a selected country from the list comparing via country code\n    deleteSelected: (state, action) => {\n      const deleteCountry = action.payload;\n      state.selected = state.selected.filter(\n        (selected) => selected.countryCode !== deleteCountry\n      );\n    },\n  },\n});\n\nexport const { addSelected, deleteSelected } = selectedSlice.actions;\n\nexport default selectedSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAGA,MAAMC,YAA2B,GAAG;EAClCC,QAAQ,EAAE;AADwB,CAApC;AAIA,OAAO,MAAMC,aAAa,GAAGH,WAAW,CAAC;EACvCI,IAAI,EAAE,UADiC;EAEvCH,YAFuC;EAGvCI,QAAQ,EAAE;IACR;IACAC,WAAW,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;MAC9B,MAAMC,WAAW,GAAGD,MAAM,CAACE,OAA3B,CAD8B,CAE9B;;MACA,MAAMC,eAAe,GAAGJ,KAAK,CAACL,QAAN,CAAeU,IAAf,CACrBV,QAAD,IAAcA,QAAQ,CAACW,WAAT,KAAyBJ,WAAW,CAACI,WAD7B,CAAxB;;MAGA,IAAI,CAACF,eAAL,EAAsB;QACpBJ,KAAK,CAACL,QAAN,CAAeY,IAAf,CAAoBN,MAAM,CAACE,OAA3B;MACD;IACF,CAXO;IAYR;IACAK,cAAc,EAAE,CAACR,KAAD,EAAQC,MAAR,KAAmB;MACjC,MAAMQ,aAAa,GAAGR,MAAM,CAACE,OAA7B;MACAH,KAAK,CAACL,QAAN,GAAiBK,KAAK,CAACL,QAAN,CAAee,MAAf,CACdf,QAAD,IAAcA,QAAQ,CAACW,WAAT,KAAyBG,aADxB,CAAjB;IAGD;EAlBO;AAH6B,CAAD,CAAjC;AAyBP,OAAO,MAAM;EAAEV,WAAF;EAAeS;AAAf,IAAkCZ,aAAa,CAACe,OAAtD;AAEP,eAAef,aAAa,CAACgB,OAA7B"},"metadata":{},"sourceType":"module"}