{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nexport const useFetch = url => {\n  _s();\n\n  const [countriesList, setCountriesList] = useState([]);\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const fetchCountries = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch(url);\n      const countries = await response.json();\n\n      if (countries) {\n        const countryInfo = countries.map(info => {\n          const {\n            alpha3Code,\n            name,\n            capital,\n            flag,\n            region,\n            population,\n            languages,\n            borders,\n            currencies\n          } = info;\n          return {\n            alpha3Code,\n            name,\n            capital,\n            flag,\n            region,\n            population,\n            languages,\n            borders,\n            currencies\n          };\n        });\n        setCountriesList(countryInfo);\n      } else {\n        setCountriesList([]);\n        setLoading(false);\n      }\n\n      setLoading(false);\n    } catch (error) {\n      setLoading(false);\n      setError(error);\n    }\n  };\n\n  useEffect(() => {\n    fetchCountries();\n  }, []);\n  return {\n    countriesList,\n    loading,\n    error\n  };\n};\n\n_s(useFetch, \"gkzK8EnnC2EVDZE+hvbQNV/GX6E=\");","map":{"version":3,"names":["useState","useEffect","useFetch","url","countriesList","setCountriesList","error","setError","loading","setLoading","fetchCountries","response","fetch","countries","json","countryInfo","map","info","alpha3Code","name","capital","flag","region","population","languages","borders","currencies"],"sources":["/Users/carolina/REACT/Exercício 2/ex2-countries-app/src/hooks/useFetch.tsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\nexport const useFetch = (url: string) => {\n  const [countriesList, setCountriesList] = useState([]);\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const fetchCountries = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch(url);\n      const countries = await response.json();\n      if (countries) {\n        const countryInfo = countries.map((info: any) => {\n          const {\n            alpha3Code,\n            name,\n            capital,\n            flag,\n            region,\n            population,\n            languages,\n            borders,\n            currencies,\n          } = info;\n\n          return {\n            alpha3Code,\n            name,\n            capital,\n            flag,\n            region,\n            population,\n            languages,\n            borders,\n            currencies,\n          };\n        });\n        setCountriesList(countryInfo);\n      } else {\n        setCountriesList([]);\n        setLoading(false);\n      }\n      setLoading(false);\n    } catch (error: any) {\n      setLoading(false);\n      setError(error);\n    }\n  };\n\n  useEffect(() => {\n    fetchCountries();\n  }, []);\n\n  return { countriesList, loading, error };\n};\n"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,OAAO,MAAMC,QAAQ,GAAIC,GAAD,IAAiB;EAAA;;EACvC,MAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCL,QAAQ,CAAC,EAAD,CAAlD;EACA,MAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;EACA,MAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,KAAD,CAAtC;;EAEA,MAAMU,cAAc,GAAG,YAAY;IACjC,IAAI;MACFD,UAAU,CAAC,IAAD,CAAV;MACA,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAACT,GAAD,CAA5B;MACA,MAAMU,SAAS,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAxB;;MACA,IAAID,SAAJ,EAAe;QACb,MAAME,WAAW,GAAGF,SAAS,CAACG,GAAV,CAAeC,IAAD,IAAe;UAC/C,MAAM;YACJC,UADI;YAEJC,IAFI;YAGJC,OAHI;YAIJC,IAJI;YAKJC,MALI;YAMJC,UANI;YAOJC,SAPI;YAQJC,OARI;YASJC;UATI,IAUFT,IAVJ;UAYA,OAAO;YACLC,UADK;YAELC,IAFK;YAGLC,OAHK;YAILC,IAJK;YAKLC,MALK;YAMLC,UANK;YAOLC,SAPK;YAQLC,OARK;YASLC;UATK,CAAP;QAWD,CAxBmB,CAApB;QAyBArB,gBAAgB,CAACU,WAAD,CAAhB;MACD,CA3BD,MA2BO;QACLV,gBAAgB,CAAC,EAAD,CAAhB;QACAI,UAAU,CAAC,KAAD,CAAV;MACD;;MACDA,UAAU,CAAC,KAAD,CAAV;IACD,CApCD,CAoCE,OAAOH,KAAP,EAAmB;MACnBG,UAAU,CAAC,KAAD,CAAV;MACAF,QAAQ,CAACD,KAAD,CAAR;IACD;EACF,CAzCD;;EA2CAL,SAAS,CAAC,MAAM;IACdS,cAAc;EACf,CAFQ,EAEN,EAFM,CAAT;EAIA,OAAO;IAAEN,aAAF;IAAiBI,OAAjB;IAA0BF;EAA1B,CAAP;AACD,CArDM;;GAAMJ,Q"},"metadata":{},"sourceType":"module"}