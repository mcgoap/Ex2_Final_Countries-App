{"ast":null,"code":"var _jsxFileName = \"/Users/carolina/REACT/my-app/src/components/CountriesList.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport Country from \"./Country\";\nimport \"./CountriesList.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CountriesList = props => {\n  _s();\n\n  const {\n    countries,\n    selectedRegion,\n    selectCountry\n  } = props;\n  let searchRegion = selectedRegion;\n  const [searchedKw, setSearchedKw] = useState(\"\"); //if user change region -> then reconsider search\n\n  useEffect(() => {\n    setSearchedKw(\"\");\n  }, [searchRegion]); //get input.value and set it to setSearchedKW\n\n  const searchHandler = e => {\n    const searchedTerm = e.target.value;\n    setSearchedKw(searchedTerm);\n  };\n\n  let foundCountries = [];\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"search-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"search\",\n      value: searchedKw,\n      onChange: searchHandler,\n      className: \"input\",\n      placeholder: \"Search a specfic country:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [countries && countries.length > 0 && (foundCountries = countries.filter(country => {\n        return searchedKw === \"\" || country.name.toLowerCase().startsWith(searchedKw.toLowerCase());\n      }).map(country => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(Country, {\n          country: country,\n          selectCountry: selectCountry\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 19\n        }, this)\n      }, country.countryCode, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this))), foundCountries.length === 0 && /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Not Found!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 43\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CountriesList, \"KYczwY+tGLjhWo43rKvem2hMXZw=\");\n\n_c = CountriesList;\nexport default CountriesList;\n\nvar _c;\n\n$RefreshReg$(_c, \"CountriesList\");","map":{"version":3,"names":["useEffect","useState","Country","CountriesList","props","countries","selectedRegion","selectCountry","searchRegion","searchedKw","setSearchedKw","searchHandler","e","searchedTerm","target","value","foundCountries","length","filter","country","name","toLowerCase","startsWith","map","countryCode"],"sources":["/Users/carolina/REACT/my-app/src/components/CountriesList.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport Country from \"./Country\";\nimport { ICountry } from \"../types\";\nimport \"./CountriesList.css\";\n\ninterface Props {\n  countries: ICountry[];\n  selectedRegion?: string;\n  selectCountry: string;\n}\n\nconst CountriesList: React.FC<Props> = (props) => {\n  const { countries, selectedRegion, selectCountry } = props;\n  let searchRegion = selectedRegion;\n  const [searchedKw, setSearchedKw] = useState(\"\");\n  //if user change region -> then reconsider search\n  useEffect(() => {\n    setSearchedKw(\"\");\n  }, [searchRegion]);\n\n  //get input.value and set it to setSearchedKW\n\n  const searchHandler = (e: React.FormEvent<HTMLInputElement>) => {\n    const searchedTerm = (e.target as HTMLInputElement).value;\n    setSearchedKw(searchedTerm);\n  };\n\n  let foundCountries = [];\n\n  return (\n    <section className=\"search-form\">\n      <input\n        type=\"search\"\n        value={searchedKw}\n        onChange={searchHandler}\n        className=\"input\"\n        placeholder=\"Search a specfic country:\"\n      />\n      {\n        <div>\n          {countries &&\n            countries.length > 0 &&\n            (foundCountries = countries\n              .filter((country) => {\n                return (\n                  searchedKw === \"\" ||\n                  country.name\n                    .toLowerCase()\n                    .startsWith(searchedKw.toLowerCase())\n                );\n              })\n              .map((country) => (\n                <li key={country.countryCode}>\n                  <Country country={country} selectCountry={selectCountry} />\n                </li>\n              )))}\n\n          {foundCountries.length === 0 && <h2>Not Found!</h2>}\n        </div>\n      }\n    </section>\n  );\n};\n\nexport default CountriesList;\n"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,OAAO,qBAAP;;;AAQA,MAAMC,aAA8B,GAAIC,KAAD,IAAW;EAAA;;EAChD,MAAM;IAAEC,SAAF;IAAaC,cAAb;IAA6BC;EAA7B,IAA+CH,KAArD;EACA,IAAII,YAAY,GAAGF,cAAnB;EACA,MAAM,CAACG,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAC,EAAD,CAA5C,CAHgD,CAIhD;;EACAD,SAAS,CAAC,MAAM;IACdU,aAAa,CAAC,EAAD,CAAb;EACD,CAFQ,EAEN,CAACF,YAAD,CAFM,CAAT,CALgD,CAShD;;EAEA,MAAMG,aAAa,GAAIC,CAAD,IAA0C;IAC9D,MAAMC,YAAY,GAAID,CAAC,CAACE,MAAH,CAA+BC,KAApD;IACAL,aAAa,CAACG,YAAD,CAAb;EACD,CAHD;;EAKA,IAAIG,cAAc,GAAG,EAArB;EAEA,oBACE;IAAS,SAAS,EAAC,aAAnB;IAAA,wBACE;MACE,IAAI,EAAC,QADP;MAEE,KAAK,EAAEP,UAFT;MAGE,QAAQ,EAAEE,aAHZ;MAIE,SAAS,EAAC,OAJZ;MAKE,WAAW,EAAC;IALd;MAAA;MAAA;MAAA;IAAA,QADF,eASI;MAAA,WACGN,SAAS,IACRA,SAAS,CAACY,MAAV,GAAmB,CADpB,KAEED,cAAc,GAAGX,SAAS,CACxBa,MADe,CACPC,OAAD,IAAa;QACnB,OACEV,UAAU,KAAK,EAAf,IACAU,OAAO,CAACC,IAAR,CACGC,WADH,GAEGC,UAFH,CAEcb,UAAU,CAACY,WAAX,EAFd,CAFF;MAMD,CARe,EASfE,GATe,CASVJ,OAAD,iBACH;QAAA,uBACE,QAAC,OAAD;UAAS,OAAO,EAAEA,OAAlB;UAA2B,aAAa,EAAEZ;QAA1C;UAAA;UAAA;UAAA;QAAA;MADF,GAASY,OAAO,CAACK,WAAjB;QAAA;QAAA;QAAA;MAAA,QAVc,CAFnB,CADH,EAkBGR,cAAc,CAACC,MAAf,KAA0B,CAA1B,iBAA+B;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAlBlC;IAAA;MAAA;MAAA;MAAA;IAAA,QATJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAiCD,CAnDD;;GAAMd,a;;KAAAA,a;AAqDN,eAAeA,aAAf"},"metadata":{},"sourceType":"module"}