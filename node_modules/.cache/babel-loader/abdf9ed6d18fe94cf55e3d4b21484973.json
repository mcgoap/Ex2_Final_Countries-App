{"ast":null,"code":"var _jsxFileName = \"/Users/carolina/REACT/Exerci\\u0301cio 2/ex2-countries-app - co\\u0301pia/src/components/Countries.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\"; //import { store } from \"../store/store\";\n\nimport CountriesList from \"./CountriesList\";\nimport Select from \"react-select\";\nimport { useState } from \"react\"; //import { useDispatch } from \"react-redux\";\n//import { useFetch } from \"../hooks/useFetch\";\n//import { getCountries } from \"../store/countrySlice\";\n\nimport \"./Countries.css\"; // interface Props {\n//   selectedRegion: string;\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst regions = [{\n  value: \"Africa\"\n}, {\n  value: \"Americas\"\n}, {\n  value: \"Asia\"\n}, {\n  value: \"Europe\"\n}, {\n  value: \"Oceania\"\n}];\n\nconst Countries = () => {\n  _s();\n\n  const [selectedRegion, setSelectedRegion] = useState(\"\");\n  const [allCountriesList, setAllCountriesList] = useState([]);\n  const [error, setError] = useState(\"\"); //const [loading, setLoading] = useState(false);\n\n  const url = \"https://restcountries.com/v2/all/\"; // const fetchCountries = async () => {\n  //   try {\n  //     setLoading(true);\n  //     const response = await fetch(url);\n  //     const countries = await response.json();\n  //     if (countries) {\n  //       const countryInfo = countries.map((info: any) => {\n  //         const {\n  //           alpha3Code,\n  //           name,\n  //           capital,\n  //           flag,\n  //           region,\n  //           population,\n  //           languages,\n  //           borders,\n  //           currencies,\n  //         } = info;\n  //         return {\n  //           alpha3Code,\n  //           name,\n  //           capital,\n  //           flag,\n  //           region,\n  //           population,\n  //           languages,\n  //           borders,\n  //           currencies,\n  //         };\n  //       });\n  //       setCountriesList(countryInfo);\n  //     } else {\n  //       setCountriesList([]);\n  //       setLoading(false);\n  //     }\n  //     setLoading(false);\n  //   } catch (error: any) {\n  //     setLoading(false);\n  //     setError(error);\n  //   }\n  // };\n\n  useEffect(() => {\n    async function fetchCountries() {\n      try {\n        //setLoading(true);\n        const response = await fetch(url);\n        const countries = await response.json();\n\n        if (countries) {\n          const countryInfo = countries.map(info => {\n            const {\n              alpha3Code,\n              name,\n              capital,\n              flag,\n              region,\n              population,\n              languages,\n              borders,\n              currencies\n            } = info;\n            return {\n              alpha3Code,\n              name,\n              capital,\n              flag,\n              region,\n              population,\n              languages,\n              borders,\n              currencies\n            };\n          });\n          setAllCountriesList(countryInfo);\n        } else {\n          setAllCountriesList([]); //setLoading(false);\n        } //setLoading(false);\n\n      } catch (error) {\n        //setLoading(false);\n        setError(error);\n      }\n    }\n\n    fetchCountries();\n  }, []); // const { allCountries, loading, error } = useFetch(\n  //   \"https://restcountries.com/v2/all/\"\n  // );\n  // const dispatch = useDispatch();\n  // dispatch(getCountries(allCountries));\n\n  const countriesList = allCountriesList.filter(country => country.region === selectedRegion);\n  console.log(allCountriesList);\n  console.log(countriesList);\n  console.log(selectedRegion);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"selection\",\n      children: /*#__PURE__*/_jsxDEV(Select, {\n        placeholder: \"Please select a region of the globe ...\",\n        options: regions,\n        defaultMenuIsOpen: true,\n        getOptionLabel: regions => regions.value,\n        onChange: opt => {\n          if (opt != null) {\n            setSelectedRegion(opt.value);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), !error && countriesList.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading data... Please wait\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Ops...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 17\n    }, this), selectedRegion && /*#__PURE__*/_jsxDEV(CountriesList, {\n      countries: countriesList,\n      selectedRegion: selectedRegion,\n      selectCountry: \"add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Countries, \"IYGfwqP32tihf0WiEzuaynIjPVk=\");\n\n_c = Countries;\nexport default Countries;\n\nvar _c;\n\n$RefreshReg$(_c, \"Countries\");","map":{"version":3,"names":["React","useEffect","CountriesList","Select","useState","regions","value","Countries","selectedRegion","setSelectedRegion","allCountriesList","setAllCountriesList","error","setError","url","fetchCountries","response","fetch","countries","json","countryInfo","map","info","alpha3Code","name","capital","flag","region","population","languages","borders","currencies","countriesList","filter","country","console","log","opt","length"],"sources":["/Users/carolina/REACT/Exercício 2/ex2-countries-app - cópia/src/components/Countries.tsx"],"sourcesContent":["import React, { useEffect } from \"react\";\n//import { store } from \"../store/store\";\nimport CountriesList from \"./CountriesList\";\nimport Select from \"react-select\";\nimport { ICountry, Region } from \"../types\";\nimport { useState } from \"react\";\n//import { useDispatch } from \"react-redux\";\n//import { useFetch } from \"../hooks/useFetch\";\n//import { getCountries } from \"../store/countrySlice\";\nimport \"./Countries.css\";\n\n// interface Props {\n//   selectedRegion: string;\n// }\n\nconst regions: Region[] = [\n  { value: \"Africa\" },\n  { value: \"Americas\" },\n  { value: \"Asia\" },\n  { value: \"Europe\" },\n  { value: \"Oceania\" },\n];\n\nconst Countries = () => {\n  const [selectedRegion, setSelectedRegion] = useState(\"\");\n  const [allCountriesList, setAllCountriesList] = useState([]);\n  const [error, setError] = useState(\"\");\n  //const [loading, setLoading] = useState(false);\n\n  const url: string = \"https://restcountries.com/v2/all/\";\n\n  // const fetchCountries = async () => {\n  //   try {\n  //     setLoading(true);\n  //     const response = await fetch(url);\n  //     const countries = await response.json();\n  //     if (countries) {\n  //       const countryInfo = countries.map((info: any) => {\n  //         const {\n  //           alpha3Code,\n  //           name,\n  //           capital,\n  //           flag,\n  //           region,\n  //           population,\n  //           languages,\n  //           borders,\n  //           currencies,\n  //         } = info;\n\n  //         return {\n  //           alpha3Code,\n  //           name,\n  //           capital,\n  //           flag,\n  //           region,\n  //           population,\n  //           languages,\n  //           borders,\n  //           currencies,\n  //         };\n  //       });\n  //       setCountriesList(countryInfo);\n  //     } else {\n  //       setCountriesList([]);\n  //       setLoading(false);\n  //     }\n  //     setLoading(false);\n  //   } catch (error: any) {\n  //     setLoading(false);\n  //     setError(error);\n  //   }\n  // };\n\n  useEffect(() => {\n    async function fetchCountries() {\n      try {\n        //setLoading(true);\n        const response = await fetch(url);\n        const countries = await response.json();\n        if (countries) {\n          const countryInfo = countries.map((info: any) => {\n            const {\n              alpha3Code,\n              name,\n              capital,\n              flag,\n              region,\n              population,\n              languages,\n              borders,\n              currencies,\n            } = info;\n\n            return {\n              alpha3Code,\n              name,\n              capital,\n              flag,\n              region,\n              population,\n              languages,\n              borders,\n              currencies,\n            };\n          });\n          setAllCountriesList(countryInfo);\n        } else {\n          setAllCountriesList([]);\n          //setLoading(false);\n        }\n        //setLoading(false);\n      } catch (error: any) {\n        //setLoading(false);\n        setError(error);\n      }\n    }\n    fetchCountries();\n  }, []);\n  // const { allCountries, loading, error } = useFetch(\n  //   \"https://restcountries.com/v2/all/\"\n  // );\n\n  // const dispatch = useDispatch();\n  // dispatch(getCountries(allCountries));\n\n  const countriesList = allCountriesList.filter(\n    (country) => country.region === selectedRegion\n  );\n\n  console.log(allCountriesList);\n  console.log(countriesList);\n  console.log(selectedRegion);\n  return (\n    <section>\n      <section className=\"selection\">\n        <Select\n          placeholder={\"Please select a region of the globe ...\"}\n          options={regions}\n          defaultMenuIsOpen={true}\n          getOptionLabel={(regions) => regions.value}\n          onChange={(opt) => {\n            if (opt != null) {\n              setSelectedRegion(opt.value);\n            }\n          }}\n        />\n      </section>\n      {!error && countriesList.length === 0 && (\n        <p>Loading data... Please wait</p>\n      )}\n      {error && <p>Ops...</p>}\n      {selectedRegion && (\n        <CountriesList\n          countries={countriesList}\n          selectedRegion={selectedRegion}\n          selectCountry=\"add\"\n        />\n      )}\n    </section>\n  );\n};\n\nexport default Countries;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}