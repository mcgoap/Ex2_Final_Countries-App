{"ast":null,"code":"var _jsxFileName = \"/Users/carolina/REACT/Exerci\\u0301cio 2/ex2-countries-app/src/components/Countries.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { store } from \"../store/store\";\nimport CountriesList from \"./CountriesList\";\nimport Select from \"react-select\";\nimport \"./Countries.css\"; // interface Props {\n//   selectedRegion: string;\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst regions = [{\n  value: \"Africa\"\n}, {\n  value: \"Americas\"\n}, {\n  value: \"Asia\"\n}, {\n  value: \"Europe\"\n}, {\n  value: \"Oceania\"\n}];\n\nconst Countries = () => {\n  _s();\n\n  const [selectedRegion, setSelectedRegion] = useState(\"\");\n  const countriesList = store.getState().countries.countries.filter(country => country.region === props.selectedRegion);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"selection\",\n      children: /*#__PURE__*/_jsxDEV(Select, {\n        placeholder: \"Please select a region of the globe ...\",\n        options: regions,\n        defaultMenuIsOpen: true,\n        getOptionLabel: regions => regions.value,\n        onChange: opt => {\n          if (opt != null) {\n            setSelectedRegion(opt.value);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), selectedRegion && /*#__PURE__*/_jsxDEV(CountriesList, {\n      countries: countriesList,\n      selectedRegion: selectedRegion,\n      selectCountry: \"add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Countries, \"PQBO31J9DP4zWzwqsqd7bxH/1pY=\");\n\n_c = Countries;\nexport default Countries;\n\nvar _c;\n\n$RefreshReg$(_c, \"Countries\");","map":{"version":3,"names":["React","store","CountriesList","Select","regions","value","Countries","selectedRegion","setSelectedRegion","useState","countriesList","getState","countries","filter","country","region","props","opt"],"sources":["/Users/carolina/REACT/Exercício 2/ex2-countries-app/src/components/Countries.tsx"],"sourcesContent":["import React from \"react\";\nimport { store } from \"../store/store\";\nimport CountriesList from \"./CountriesList\";\nimport Select from \"react-select\";\nimport { Region } from \"../types\";\nimport \"./Countries.css\";\n\n// interface Props {\n//   selectedRegion: string;\n// }\n\nconst regions: Region[] = [\n  { value: \"Africa\" },\n  { value: \"Americas\" },\n  { value: \"Asia\" },\n  { value: \"Europe\" },\n  { value: \"Oceania\" },\n];\n\nconst Countries = () => {\n  const [selectedRegion, setSelectedRegion] = useState(\"\");\n\n  const countriesList = store\n    .getState()\n    .countries.countries.filter(\n      (country) => country.region === props.selectedRegion\n    );\n\n  return (\n    <section>\n      <section className=\"selection\">\n        <Select\n          placeholder={\"Please select a region of the globe ...\"}\n          options={regions}\n          defaultMenuIsOpen={true}\n          getOptionLabel={(regions) => regions.value}\n          onChange={(opt) => {\n            if (opt != null) {\n              setSelectedRegion(opt.value);\n            }\n          }}\n        />\n      </section>\n\n      {selectedRegion && (\n        <CountriesList\n          countries={countriesList}\n          selectedRegion={selectedRegion}\n          selectCountry=\"add\"\n        />\n      )}\n    </section>\n  );\n};\n\nexport default Countries;\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAEA,OAAO,iBAAP,C,CAEA;AACA;AACA;;;AAEA,MAAMC,OAAiB,GAAG,CACxB;EAAEC,KAAK,EAAE;AAAT,CADwB,EAExB;EAAEA,KAAK,EAAE;AAAT,CAFwB,EAGxB;EAAEA,KAAK,EAAE;AAAT,CAHwB,EAIxB;EAAEA,KAAK,EAAE;AAAT,CAJwB,EAKxB;EAAEA,KAAK,EAAE;AAAT,CALwB,CAA1B;;AAQA,MAAMC,SAAS,GAAG,MAAM;EAAA;;EACtB,MAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCC,QAAQ,CAAC,EAAD,CAApD;EAEA,MAAMC,aAAa,GAAGT,KAAK,CACxBU,QADmB,GAEnBC,SAFmB,CAETA,SAFS,CAECC,MAFD,CAGjBC,OAAD,IAAaA,OAAO,CAACC,MAAR,KAAmBC,KAAK,CAACT,cAHpB,CAAtB;EAMA,oBACE;IAAA,wBACE;MAAS,SAAS,EAAC,WAAnB;MAAA,uBACE,QAAC,MAAD;QACE,WAAW,EAAE,yCADf;QAEE,OAAO,EAAEH,OAFX;QAGE,iBAAiB,EAAE,IAHrB;QAIE,cAAc,EAAGA,OAAD,IAAaA,OAAO,CAACC,KAJvC;QAKE,QAAQ,EAAGY,GAAD,IAAS;UACjB,IAAIA,GAAG,IAAI,IAAX,EAAiB;YACfT,iBAAiB,CAACS,GAAG,CAACZ,KAAL,CAAjB;UACD;QACF;MATH;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QADF,EAeGE,cAAc,iBACb,QAAC,aAAD;MACE,SAAS,EAAEG,aADb;MAEE,cAAc,EAAEH,cAFlB;MAGE,aAAa,EAAC;IAHhB;MAAA;MAAA;MAAA;IAAA,QAhBJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAyBD,CAlCD;;GAAMD,S;;KAAAA,S;AAoCN,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}